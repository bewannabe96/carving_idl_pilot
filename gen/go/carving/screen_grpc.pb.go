// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: carving/screen.proto

package carving

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScreenServiceClient is the client API for ScreenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScreenServiceClient interface {
	LogScreenChanged(ctx context.Context, in *LogScreenChangedRequest, opts ...grpc.CallOption) (*LogScreenChangedResponse, error)
}

type screenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScreenServiceClient(cc grpc.ClientConnInterface) ScreenServiceClient {
	return &screenServiceClient{cc}
}

func (c *screenServiceClient) LogScreenChanged(ctx context.Context, in *LogScreenChangedRequest, opts ...grpc.CallOption) (*LogScreenChangedResponse, error) {
	out := new(LogScreenChangedResponse)
	err := c.cc.Invoke(ctx, "/carving.screen.ScreenService/LogScreenChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScreenServiceServer is the server API for ScreenService service.
// All implementations must embed UnimplementedScreenServiceServer
// for forward compatibility
type ScreenServiceServer interface {
	LogScreenChanged(context.Context, *LogScreenChangedRequest) (*LogScreenChangedResponse, error)
	mustEmbedUnimplementedScreenServiceServer()
}

// UnimplementedScreenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScreenServiceServer struct {
}

func (UnimplementedScreenServiceServer) LogScreenChanged(context.Context, *LogScreenChangedRequest) (*LogScreenChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogScreenChanged not implemented")
}
func (UnimplementedScreenServiceServer) mustEmbedUnimplementedScreenServiceServer() {}

// UnsafeScreenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScreenServiceServer will
// result in compilation errors.
type UnsafeScreenServiceServer interface {
	mustEmbedUnimplementedScreenServiceServer()
}

func RegisterScreenServiceServer(s grpc.ServiceRegistrar, srv ScreenServiceServer) {
	s.RegisterService(&ScreenService_ServiceDesc, srv)
}

func _ScreenService_LogScreenChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogScreenChangedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenServiceServer).LogScreenChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carving.screen.ScreenService/LogScreenChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenServiceServer).LogScreenChanged(ctx, req.(*LogScreenChangedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScreenService_ServiceDesc is the grpc.ServiceDesc for ScreenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScreenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carving.screen.ScreenService",
	HandlerType: (*ScreenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogScreenChanged",
			Handler:    _ScreenService_LogScreenChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carving/screen.proto",
}
